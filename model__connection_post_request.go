/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionPostRequest{}

// ConnectionPostRequest struct for ConnectionPostRequest
type ConnectionPostRequest struct {
	// The connection ID used to create the connection.
	ConnectionId string `json:"connection_id"`
	// The integration ID that you created on Nango.
	ProviderConfigKey string `json:"provider_config_key"`
	// (OAuth 2, required) Existing access token.
	AccessToken *string `json:"access_token,omitempty"`
	// (OAuth 2, optional) Pass the refresh token if you have it.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// (OAuth 2, optional) Safer and preferred.
	ExpiresAt *string `json:"expires_at,omitempty"`
	// (OAuth 2, optional) In seconds.
	ExpiresIn *int32 `json:"expires_in,omitempty"`
	// (OAuth2, optional) If the provider gives access tokens that don't expire, pass in `true` to avoid an import validation error.
	NoExpiration *bool `json:"no_expiration,omitempty"`
	// (OAuth2, optional) Override the integration's OAuth client id
	OauthClientIdOverride *string `json:"oauth_client_id_override,omitempty"`
	// (OAuth2, optional) Override the integration's OAuth client secret
	OauthClientSecretOverride *string `json:"oauth_client_secret_override,omitempty"`
	// (OAuth 1, required) The client token to be attached to the connection.
	OauthToken *string `json:"oauth_token,omitempty"`
	// (OAuth 1, required) The client token secret to be attached to the connection.
	OauthTokenSecret *string `json:"oauth_token_secret,omitempty"`
	// (OAuth, required for some APIs) Metadata to be attached to the connection.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// (OAuth, required for some APIs) Additional configuration to be attached to the connection.
	ConnectionConfig map[string]interface{} `json:"connection_config,omitempty"`
	// (Basic, required) username to be attached to the connection.
	Username *string `json:"username,omitempty"`
	// (Basic, required) password to be attached to the connection.
	Password *string `json:"password,omitempty"`
	// (API Key, required) API key to be attached to the connection.
	ApiKey *string `json:"api_key,omitempty"`
}

type _ConnectionPostRequest ConnectionPostRequest

// NewConnectionPostRequest instantiates a new ConnectionPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionPostRequest(connectionId string, providerConfigKey string) *ConnectionPostRequest {
	this := ConnectionPostRequest{}
	this.ConnectionId = connectionId
	this.ProviderConfigKey = providerConfigKey
	return &this
}

// NewConnectionPostRequestWithDefaults instantiates a new ConnectionPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionPostRequestWithDefaults() *ConnectionPostRequest {
	this := ConnectionPostRequest{}
	return &this
}

// GetConnectionId returns the ConnectionId field value
func (o *ConnectionPostRequest) GetConnectionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetConnectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *ConnectionPostRequest) SetConnectionId(v string) {
	o.ConnectionId = v
}

// GetProviderConfigKey returns the ProviderConfigKey field value
func (o *ConnectionPostRequest) GetProviderConfigKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderConfigKey
}

// GetProviderConfigKeyOk returns a tuple with the ProviderConfigKey field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetProviderConfigKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderConfigKey, true
}

// SetProviderConfigKey sets field value
func (o *ConnectionPostRequest) SetProviderConfigKey(v string) {
	o.ProviderConfigKey = v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *ConnectionPostRequest) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetRefreshToken() string {
	if o == nil || IsNil(o.RefreshToken) {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetRefreshTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *ConnectionPostRequest) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *ConnectionPostRequest) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *ConnectionPostRequest) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetNoExpiration returns the NoExpiration field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetNoExpiration() bool {
	if o == nil || IsNil(o.NoExpiration) {
		var ret bool
		return ret
	}
	return *o.NoExpiration
}

// GetNoExpirationOk returns a tuple with the NoExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetNoExpirationOk() (*bool, bool) {
	if o == nil || IsNil(o.NoExpiration) {
		return nil, false
	}
	return o.NoExpiration, true
}

// HasNoExpiration returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasNoExpiration() bool {
	if o != nil && !IsNil(o.NoExpiration) {
		return true
	}

	return false
}

// SetNoExpiration gets a reference to the given bool and assigns it to the NoExpiration field.
func (o *ConnectionPostRequest) SetNoExpiration(v bool) {
	o.NoExpiration = &v
}

// GetOauthClientIdOverride returns the OauthClientIdOverride field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetOauthClientIdOverride() string {
	if o == nil || IsNil(o.OauthClientIdOverride) {
		var ret string
		return ret
	}
	return *o.OauthClientIdOverride
}

// GetOauthClientIdOverrideOk returns a tuple with the OauthClientIdOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetOauthClientIdOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.OauthClientIdOverride) {
		return nil, false
	}
	return o.OauthClientIdOverride, true
}

// HasOauthClientIdOverride returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasOauthClientIdOverride() bool {
	if o != nil && !IsNil(o.OauthClientIdOverride) {
		return true
	}

	return false
}

// SetOauthClientIdOverride gets a reference to the given string and assigns it to the OauthClientIdOverride field.
func (o *ConnectionPostRequest) SetOauthClientIdOverride(v string) {
	o.OauthClientIdOverride = &v
}

// GetOauthClientSecretOverride returns the OauthClientSecretOverride field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetOauthClientSecretOverride() string {
	if o == nil || IsNil(o.OauthClientSecretOverride) {
		var ret string
		return ret
	}
	return *o.OauthClientSecretOverride
}

// GetOauthClientSecretOverrideOk returns a tuple with the OauthClientSecretOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetOauthClientSecretOverrideOk() (*string, bool) {
	if o == nil || IsNil(o.OauthClientSecretOverride) {
		return nil, false
	}
	return o.OauthClientSecretOverride, true
}

// HasOauthClientSecretOverride returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasOauthClientSecretOverride() bool {
	if o != nil && !IsNil(o.OauthClientSecretOverride) {
		return true
	}

	return false
}

// SetOauthClientSecretOverride gets a reference to the given string and assigns it to the OauthClientSecretOverride field.
func (o *ConnectionPostRequest) SetOauthClientSecretOverride(v string) {
	o.OauthClientSecretOverride = &v
}

// GetOauthToken returns the OauthToken field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetOauthToken() string {
	if o == nil || IsNil(o.OauthToken) {
		var ret string
		return ret
	}
	return *o.OauthToken
}

// GetOauthTokenOk returns a tuple with the OauthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetOauthTokenOk() (*string, bool) {
	if o == nil || IsNil(o.OauthToken) {
		return nil, false
	}
	return o.OauthToken, true
}

// HasOauthToken returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasOauthToken() bool {
	if o != nil && !IsNil(o.OauthToken) {
		return true
	}

	return false
}

// SetOauthToken gets a reference to the given string and assigns it to the OauthToken field.
func (o *ConnectionPostRequest) SetOauthToken(v string) {
	o.OauthToken = &v
}

// GetOauthTokenSecret returns the OauthTokenSecret field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetOauthTokenSecret() string {
	if o == nil || IsNil(o.OauthTokenSecret) {
		var ret string
		return ret
	}
	return *o.OauthTokenSecret
}

// GetOauthTokenSecretOk returns a tuple with the OauthTokenSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetOauthTokenSecretOk() (*string, bool) {
	if o == nil || IsNil(o.OauthTokenSecret) {
		return nil, false
	}
	return o.OauthTokenSecret, true
}

// HasOauthTokenSecret returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasOauthTokenSecret() bool {
	if o != nil && !IsNil(o.OauthTokenSecret) {
		return true
	}

	return false
}

// SetOauthTokenSecret gets a reference to the given string and assigns it to the OauthTokenSecret field.
func (o *ConnectionPostRequest) SetOauthTokenSecret(v string) {
	o.OauthTokenSecret = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ConnectionPostRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetConnectionConfig returns the ConnectionConfig field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetConnectionConfig() map[string]interface{} {
	if o == nil || IsNil(o.ConnectionConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.ConnectionConfig
}

// GetConnectionConfigOk returns a tuple with the ConnectionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetConnectionConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ConnectionConfig) {
		return map[string]interface{}{}, false
	}
	return o.ConnectionConfig, true
}

// HasConnectionConfig returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasConnectionConfig() bool {
	if o != nil && !IsNil(o.ConnectionConfig) {
		return true
	}

	return false
}

// SetConnectionConfig gets a reference to the given map[string]interface{} and assigns it to the ConnectionConfig field.
func (o *ConnectionPostRequest) SetConnectionConfig(v map[string]interface{}) {
	o.ConnectionConfig = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ConnectionPostRequest) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ConnectionPostRequest) SetPassword(v string) {
	o.Password = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *ConnectionPostRequest) SetApiKey(v string) {
	o.ApiKey = &v
}

func (o ConnectionPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connection_id"] = o.ConnectionId
	toSerialize["provider_config_key"] = o.ProviderConfigKey
	if !IsNil(o.AccessToken) {
		toSerialize["access_token"] = o.AccessToken
	}
	if !IsNil(o.RefreshToken) {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	if !IsNil(o.NoExpiration) {
		toSerialize["no_expiration"] = o.NoExpiration
	}
	if !IsNil(o.OauthClientIdOverride) {
		toSerialize["oauth_client_id_override"] = o.OauthClientIdOverride
	}
	if !IsNil(o.OauthClientSecretOverride) {
		toSerialize["oauth_client_secret_override"] = o.OauthClientSecretOverride
	}
	if !IsNil(o.OauthToken) {
		toSerialize["oauth_token"] = o.OauthToken
	}
	if !IsNil(o.OauthTokenSecret) {
		toSerialize["oauth_token_secret"] = o.OauthTokenSecret
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.ConnectionConfig) {
		toSerialize["connection_config"] = o.ConnectionConfig
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	return toSerialize, nil
}

func (o *ConnectionPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connection_id",
		"provider_config_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionPostRequest := _ConnectionPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionPostRequest)

	if err != nil {
		return err
	}

	*o = ConnectionPostRequest(varConnectionPostRequest)

	return err
}

type NullableConnectionPostRequest struct {
	value *ConnectionPostRequest
	isSet bool
}

func (v NullableConnectionPostRequest) Get() *ConnectionPostRequest {
	return v.value
}

func (v *NullableConnectionPostRequest) Set(val *ConnectionPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionPostRequest(val *ConnectionPostRequest) *NullableConnectionPostRequest {
	return &NullableConnectionPostRequest{value: val, isSet: true}
}

func (v NullableConnectionPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


