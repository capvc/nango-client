/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SyncPausePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncPausePostRequest{}

// SyncPausePostRequest struct for SyncPausePostRequest
type SyncPausePostRequest struct {
	// The ID of the integration that you established within Nango.
	ProviderConfigKey string `json:"provider_config_key"`
	// The ID of the connection. If omitted, the syncs will be paused for all relevant connections.
	ConnectionId *string `json:"connection_id,omitempty"`
	// A list of sync names that you wish to pause.
	Syncs []string `json:"syncs"`
}

type _SyncPausePostRequest SyncPausePostRequest

// NewSyncPausePostRequest instantiates a new SyncPausePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncPausePostRequest(providerConfigKey string, syncs []string) *SyncPausePostRequest {
	this := SyncPausePostRequest{}
	this.ProviderConfigKey = providerConfigKey
	this.Syncs = syncs
	return &this
}

// NewSyncPausePostRequestWithDefaults instantiates a new SyncPausePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncPausePostRequestWithDefaults() *SyncPausePostRequest {
	this := SyncPausePostRequest{}
	return &this
}

// GetProviderConfigKey returns the ProviderConfigKey field value
func (o *SyncPausePostRequest) GetProviderConfigKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderConfigKey
}

// GetProviderConfigKeyOk returns a tuple with the ProviderConfigKey field value
// and a boolean to check if the value has been set.
func (o *SyncPausePostRequest) GetProviderConfigKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderConfigKey, true
}

// SetProviderConfigKey sets field value
func (o *SyncPausePostRequest) SetProviderConfigKey(v string) {
	o.ProviderConfigKey = v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *SyncPausePostRequest) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncPausePostRequest) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *SyncPausePostRequest) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *SyncPausePostRequest) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetSyncs returns the Syncs field value
func (o *SyncPausePostRequest) GetSyncs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Syncs
}

// GetSyncsOk returns a tuple with the Syncs field value
// and a boolean to check if the value has been set.
func (o *SyncPausePostRequest) GetSyncsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Syncs, true
}

// SetSyncs sets field value
func (o *SyncPausePostRequest) SetSyncs(v []string) {
	o.Syncs = v
}

func (o SyncPausePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncPausePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider_config_key"] = o.ProviderConfigKey
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	toSerialize["syncs"] = o.Syncs
	return toSerialize, nil
}

func (o *SyncPausePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider_config_key",
		"syncs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSyncPausePostRequest := _SyncPausePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSyncPausePostRequest)

	if err != nil {
		return err
	}

	*o = SyncPausePostRequest(varSyncPausePostRequest)

	return err
}

type NullableSyncPausePostRequest struct {
	value *SyncPausePostRequest
	isSet bool
}

func (v NullableSyncPausePostRequest) Get() *SyncPausePostRequest {
	return v.value
}

func (v *NullableSyncPausePostRequest) Set(val *SyncPausePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncPausePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncPausePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncPausePostRequest(val *SyncPausePostRequest) *NullableSyncPausePostRequest {
	return &NullableSyncPausePostRequest{value: val, isSet: true}
}

func (v NullableSyncPausePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncPausePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


