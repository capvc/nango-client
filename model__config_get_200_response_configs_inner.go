/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigGet200ResponseConfigsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigGet200ResponseConfigsInner{}

// ConfigGet200ResponseConfigsInner struct for ConfigGet200ResponseConfigsInner
type ConfigGet200ResponseConfigsInner struct {
	// The integration ID that you created in Nango.
	UniqueKey string `json:"unique_key"`
	// The Nango API Configuration.
	Provider string `json:"provider"`
}

type _ConfigGet200ResponseConfigsInner ConfigGet200ResponseConfigsInner

// NewConfigGet200ResponseConfigsInner instantiates a new ConfigGet200ResponseConfigsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigGet200ResponseConfigsInner(uniqueKey string, provider string) *ConfigGet200ResponseConfigsInner {
	this := ConfigGet200ResponseConfigsInner{}
	this.UniqueKey = uniqueKey
	this.Provider = provider
	return &this
}

// NewConfigGet200ResponseConfigsInnerWithDefaults instantiates a new ConfigGet200ResponseConfigsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigGet200ResponseConfigsInnerWithDefaults() *ConfigGet200ResponseConfigsInner {
	this := ConfigGet200ResponseConfigsInner{}
	return &this
}

// GetUniqueKey returns the UniqueKey field value
func (o *ConfigGet200ResponseConfigsInner) GetUniqueKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniqueKey
}

// GetUniqueKeyOk returns a tuple with the UniqueKey field value
// and a boolean to check if the value has been set.
func (o *ConfigGet200ResponseConfigsInner) GetUniqueKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueKey, true
}

// SetUniqueKey sets field value
func (o *ConfigGet200ResponseConfigsInner) SetUniqueKey(v string) {
	o.UniqueKey = v
}

// GetProvider returns the Provider field value
func (o *ConfigGet200ResponseConfigsInner) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ConfigGet200ResponseConfigsInner) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ConfigGet200ResponseConfigsInner) SetProvider(v string) {
	o.Provider = v
}

func (o ConfigGet200ResponseConfigsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigGet200ResponseConfigsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unique_key"] = o.UniqueKey
	toSerialize["provider"] = o.Provider
	return toSerialize, nil
}

func (o *ConfigGet200ResponseConfigsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unique_key",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigGet200ResponseConfigsInner := _ConfigGet200ResponseConfigsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigGet200ResponseConfigsInner)

	if err != nil {
		return err
	}

	*o = ConfigGet200ResponseConfigsInner(varConfigGet200ResponseConfigsInner)

	return err
}

type NullableConfigGet200ResponseConfigsInner struct {
	value *ConfigGet200ResponseConfigsInner
	isSet bool
}

func (v NullableConfigGet200ResponseConfigsInner) Get() *ConfigGet200ResponseConfigsInner {
	return v.value
}

func (v *NullableConfigGet200ResponseConfigsInner) Set(val *ConfigGet200ResponseConfigsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigGet200ResponseConfigsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigGet200ResponseConfigsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigGet200ResponseConfigsInner(val *ConfigGet200ResponseConfigsInner) *NullableConfigGet200ResponseConfigsInner {
	return &NullableConfigGet200ResponseConfigsInner{value: val, isSet: true}
}

func (v NullableConfigGet200ResponseConfigsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigGet200ResponseConfigsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


