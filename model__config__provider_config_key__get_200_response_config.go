/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigProviderConfigKeyGet200ResponseConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigProviderConfigKeyGet200ResponseConfig{}

// ConfigProviderConfigKeyGet200ResponseConfig struct for ConfigProviderConfigKeyGet200ResponseConfig
type ConfigProviderConfigKeyGet200ResponseConfig struct {
	// The integration ID that you created in Nango.
	UniqueKey string `json:"unique_key"`
	// The Nango API Configuration.
	Provider string `json:"provider"`
	Actions []ConfigProviderConfigKeyGet200ResponseConfigActionsInner `json:"actions,omitempty"`
	Syncs []ConfigProviderConfigKeyGet200ResponseConfigSyncsInner `json:"syncs,omitempty"`
}

type _ConfigProviderConfigKeyGet200ResponseConfig ConfigProviderConfigKeyGet200ResponseConfig

// NewConfigProviderConfigKeyGet200ResponseConfig instantiates a new ConfigProviderConfigKeyGet200ResponseConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigProviderConfigKeyGet200ResponseConfig(uniqueKey string, provider string) *ConfigProviderConfigKeyGet200ResponseConfig {
	this := ConfigProviderConfigKeyGet200ResponseConfig{}
	this.UniqueKey = uniqueKey
	this.Provider = provider
	return &this
}

// NewConfigProviderConfigKeyGet200ResponseConfigWithDefaults instantiates a new ConfigProviderConfigKeyGet200ResponseConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigProviderConfigKeyGet200ResponseConfigWithDefaults() *ConfigProviderConfigKeyGet200ResponseConfig {
	this := ConfigProviderConfigKeyGet200ResponseConfig{}
	return &this
}

// GetUniqueKey returns the UniqueKey field value
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetUniqueKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UniqueKey
}

// GetUniqueKeyOk returns a tuple with the UniqueKey field value
// and a boolean to check if the value has been set.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetUniqueKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UniqueKey, true
}

// SetUniqueKey sets field value
func (o *ConfigProviderConfigKeyGet200ResponseConfig) SetUniqueKey(v string) {
	o.UniqueKey = v
}

// GetProvider returns the Provider field value
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ConfigProviderConfigKeyGet200ResponseConfig) SetProvider(v string) {
	o.Provider = v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetActions() []ConfigProviderConfigKeyGet200ResponseConfigActionsInner {
	if o == nil || IsNil(o.Actions) {
		var ret []ConfigProviderConfigKeyGet200ResponseConfigActionsInner
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetActionsOk() ([]ConfigProviderConfigKeyGet200ResponseConfigActionsInner, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []ConfigProviderConfigKeyGet200ResponseConfigActionsInner and assigns it to the Actions field.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) SetActions(v []ConfigProviderConfigKeyGet200ResponseConfigActionsInner) {
	o.Actions = v
}

// GetSyncs returns the Syncs field value if set, zero value otherwise.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetSyncs() []ConfigProviderConfigKeyGet200ResponseConfigSyncsInner {
	if o == nil || IsNil(o.Syncs) {
		var ret []ConfigProviderConfigKeyGet200ResponseConfigSyncsInner
		return ret
	}
	return o.Syncs
}

// GetSyncsOk returns a tuple with the Syncs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) GetSyncsOk() ([]ConfigProviderConfigKeyGet200ResponseConfigSyncsInner, bool) {
	if o == nil || IsNil(o.Syncs) {
		return nil, false
	}
	return o.Syncs, true
}

// HasSyncs returns a boolean if a field has been set.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) HasSyncs() bool {
	if o != nil && !IsNil(o.Syncs) {
		return true
	}

	return false
}

// SetSyncs gets a reference to the given []ConfigProviderConfigKeyGet200ResponseConfigSyncsInner and assigns it to the Syncs field.
func (o *ConfigProviderConfigKeyGet200ResponseConfig) SetSyncs(v []ConfigProviderConfigKeyGet200ResponseConfigSyncsInner) {
	o.Syncs = v
}

func (o ConfigProviderConfigKeyGet200ResponseConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigProviderConfigKeyGet200ResponseConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unique_key"] = o.UniqueKey
	toSerialize["provider"] = o.Provider
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Syncs) {
		toSerialize["syncs"] = o.Syncs
	}
	return toSerialize, nil
}

func (o *ConfigProviderConfigKeyGet200ResponseConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unique_key",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigProviderConfigKeyGet200ResponseConfig := _ConfigProviderConfigKeyGet200ResponseConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigProviderConfigKeyGet200ResponseConfig)

	if err != nil {
		return err
	}

	*o = ConfigProviderConfigKeyGet200ResponseConfig(varConfigProviderConfigKeyGet200ResponseConfig)

	return err
}

type NullableConfigProviderConfigKeyGet200ResponseConfig struct {
	value *ConfigProviderConfigKeyGet200ResponseConfig
	isSet bool
}

func (v NullableConfigProviderConfigKeyGet200ResponseConfig) Get() *ConfigProviderConfigKeyGet200ResponseConfig {
	return v.value
}

func (v *NullableConfigProviderConfigKeyGet200ResponseConfig) Set(val *ConfigProviderConfigKeyGet200ResponseConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigProviderConfigKeyGet200ResponseConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigProviderConfigKeyGet200ResponseConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigProviderConfigKeyGet200ResponseConfig(val *ConfigProviderConfigKeyGet200ResponseConfig) *NullableConfigProviderConfigKeyGet200ResponseConfig {
	return &NullableConfigProviderConfigKeyGet200ResponseConfig{value: val, isSet: true}
}

func (v NullableConfigProviderConfigKeyGet200ResponseConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigProviderConfigKeyGet200ResponseConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


