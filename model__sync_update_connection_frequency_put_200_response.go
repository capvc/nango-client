/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
)

// checks if the SyncUpdateConnectionFrequencyPut200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyncUpdateConnectionFrequencyPut200Response{}

// SyncUpdateConnectionFrequencyPut200Response struct for SyncUpdateConnectionFrequencyPut200Response
type SyncUpdateConnectionFrequencyPut200Response struct {
	// The updated frequency value
	Frequency *string `json:"frequency,omitempty"`
}

// NewSyncUpdateConnectionFrequencyPut200Response instantiates a new SyncUpdateConnectionFrequencyPut200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncUpdateConnectionFrequencyPut200Response() *SyncUpdateConnectionFrequencyPut200Response {
	this := SyncUpdateConnectionFrequencyPut200Response{}
	return &this
}

// NewSyncUpdateConnectionFrequencyPut200ResponseWithDefaults instantiates a new SyncUpdateConnectionFrequencyPut200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncUpdateConnectionFrequencyPut200ResponseWithDefaults() *SyncUpdateConnectionFrequencyPut200Response {
	this := SyncUpdateConnectionFrequencyPut200Response{}
	return &this
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *SyncUpdateConnectionFrequencyPut200Response) GetFrequency() string {
	if o == nil || IsNil(o.Frequency) {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncUpdateConnectionFrequencyPut200Response) GetFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *SyncUpdateConnectionFrequencyPut200Response) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *SyncUpdateConnectionFrequencyPut200Response) SetFrequency(v string) {
	o.Frequency = &v
}

func (o SyncUpdateConnectionFrequencyPut200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyncUpdateConnectionFrequencyPut200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	return toSerialize, nil
}

type NullableSyncUpdateConnectionFrequencyPut200Response struct {
	value *SyncUpdateConnectionFrequencyPut200Response
	isSet bool
}

func (v NullableSyncUpdateConnectionFrequencyPut200Response) Get() *SyncUpdateConnectionFrequencyPut200Response {
	return v.value
}

func (v *NullableSyncUpdateConnectionFrequencyPut200Response) Set(val *SyncUpdateConnectionFrequencyPut200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncUpdateConnectionFrequencyPut200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncUpdateConnectionFrequencyPut200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncUpdateConnectionFrequencyPut200Response(val *SyncUpdateConnectionFrequencyPut200Response) *NullableSyncUpdateConnectionFrequencyPut200Response {
	return &NullableSyncUpdateConnectionFrequencyPut200Response{value: val, isSet: true}
}

func (v NullableSyncUpdateConnectionFrequencyPut200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncUpdateConnectionFrequencyPut200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


