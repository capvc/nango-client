/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
)

// checks if the RecordsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordsGet200Response{}

// RecordsGet200Response struct for RecordsGet200Response
type RecordsGet200Response struct {
	Records []RecordsGet200ResponseRecordsInner `json:"records,omitempty"`
	// The base64-encoded cursor for pagination
	NextCursor *string `json:"next_cursor,omitempty"`
}

// NewRecordsGet200Response instantiates a new RecordsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordsGet200Response() *RecordsGet200Response {
	this := RecordsGet200Response{}
	return &this
}

// NewRecordsGet200ResponseWithDefaults instantiates a new RecordsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordsGet200ResponseWithDefaults() *RecordsGet200Response {
	this := RecordsGet200Response{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *RecordsGet200Response) GetRecords() []RecordsGet200ResponseRecordsInner {
	if o == nil || IsNil(o.Records) {
		var ret []RecordsGet200ResponseRecordsInner
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsGet200Response) GetRecordsOk() ([]RecordsGet200ResponseRecordsInner, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *RecordsGet200Response) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []RecordsGet200ResponseRecordsInner and assigns it to the Records field.
func (o *RecordsGet200Response) SetRecords(v []RecordsGet200ResponseRecordsInner) {
	o.Records = v
}

// GetNextCursor returns the NextCursor field value if set, zero value otherwise.
func (o *RecordsGet200Response) GetNextCursor() string {
	if o == nil || IsNil(o.NextCursor) {
		var ret string
		return ret
	}
	return *o.NextCursor
}

// GetNextCursorOk returns a tuple with the NextCursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordsGet200Response) GetNextCursorOk() (*string, bool) {
	if o == nil || IsNil(o.NextCursor) {
		return nil, false
	}
	return o.NextCursor, true
}

// HasNextCursor returns a boolean if a field has been set.
func (o *RecordsGet200Response) HasNextCursor() bool {
	if o != nil && !IsNil(o.NextCursor) {
		return true
	}

	return false
}

// SetNextCursor gets a reference to the given string and assigns it to the NextCursor field.
func (o *RecordsGet200Response) SetNextCursor(v string) {
	o.NextCursor = &v
}

func (o RecordsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	if !IsNil(o.NextCursor) {
		toSerialize["next_cursor"] = o.NextCursor
	}
	return toSerialize, nil
}

type NullableRecordsGet200Response struct {
	value *RecordsGet200Response
	isSet bool
}

func (v NullableRecordsGet200Response) Get() *RecordsGet200Response {
	return v.value
}

func (v *NullableRecordsGet200Response) Set(val *RecordsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordsGet200Response(val *RecordsGet200Response) *NullableRecordsGet200Response {
	return &NullableRecordsGet200Response{value: val, isSet: true}
}

func (v NullableRecordsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


