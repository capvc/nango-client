/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigGet200Response{}

// ConfigGet200Response struct for ConfigGet200Response
type ConfigGet200Response struct {
	Configs []ConfigGet200ResponseConfigsInner `json:"configs"`
}

type _ConfigGet200Response ConfigGet200Response

// NewConfigGet200Response instantiates a new ConfigGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigGet200Response(configs []ConfigGet200ResponseConfigsInner) *ConfigGet200Response {
	this := ConfigGet200Response{}
	this.Configs = configs
	return &this
}

// NewConfigGet200ResponseWithDefaults instantiates a new ConfigGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigGet200ResponseWithDefaults() *ConfigGet200Response {
	this := ConfigGet200Response{}
	return &this
}

// GetConfigs returns the Configs field value
func (o *ConfigGet200Response) GetConfigs() []ConfigGet200ResponseConfigsInner {
	if o == nil {
		var ret []ConfigGet200ResponseConfigsInner
		return ret
	}

	return o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value
// and a boolean to check if the value has been set.
func (o *ConfigGet200Response) GetConfigsOk() ([]ConfigGet200ResponseConfigsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Configs, true
}

// SetConfigs sets field value
func (o *ConfigGet200Response) SetConfigs(v []ConfigGet200ResponseConfigsInner) {
	o.Configs = v
}

func (o ConfigGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configs"] = o.Configs
	return toSerialize, nil
}

func (o *ConfigGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"configs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigGet200Response := _ConfigGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigGet200Response)

	if err != nil {
		return err
	}

	*o = ConfigGet200Response(varConfigGet200Response)

	return err
}

type NullableConfigGet200Response struct {
	value *ConfigGet200Response
	isSet bool
}

func (v NullableConfigGet200Response) Get() *ConfigGet200Response {
	return v.value
}

func (v *NullableConfigGet200Response) Set(val *ConfigGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigGet200Response(val *ConfigGet200Response) *NullableConfigGet200Response {
	return &NullableConfigGet200Response{value: val, isSet: true}
}

func (v NullableConfigGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


