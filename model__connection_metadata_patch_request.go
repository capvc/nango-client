/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionMetadataPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionMetadataPatchRequest{}

// ConnectionMetadataPatchRequest struct for ConnectionMetadataPatchRequest
type ConnectionMetadataPatchRequest struct {
	ConnectionId ConnectionMetadataPatchRequestConnectionId `json:"connection_id"`
	// The integration ID used to create the connection (aka Unique Key).
	ProviderConfigKey string `json:"provider_config_key"`
	Metadata map[string]interface{} `json:"metadata"`
}

type _ConnectionMetadataPatchRequest ConnectionMetadataPatchRequest

// NewConnectionMetadataPatchRequest instantiates a new ConnectionMetadataPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionMetadataPatchRequest(connectionId ConnectionMetadataPatchRequestConnectionId, providerConfigKey string, metadata map[string]interface{}) *ConnectionMetadataPatchRequest {
	this := ConnectionMetadataPatchRequest{}
	this.ConnectionId = connectionId
	this.ProviderConfigKey = providerConfigKey
	this.Metadata = metadata
	return &this
}

// NewConnectionMetadataPatchRequestWithDefaults instantiates a new ConnectionMetadataPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionMetadataPatchRequestWithDefaults() *ConnectionMetadataPatchRequest {
	this := ConnectionMetadataPatchRequest{}
	return &this
}

// GetConnectionId returns the ConnectionId field value
func (o *ConnectionMetadataPatchRequest) GetConnectionId() ConnectionMetadataPatchRequestConnectionId {
	if o == nil {
		var ret ConnectionMetadataPatchRequestConnectionId
		return ret
	}

	return o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
func (o *ConnectionMetadataPatchRequest) GetConnectionIdOk() (*ConnectionMetadataPatchRequestConnectionId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionId, true
}

// SetConnectionId sets field value
func (o *ConnectionMetadataPatchRequest) SetConnectionId(v ConnectionMetadataPatchRequestConnectionId) {
	o.ConnectionId = v
}

// GetProviderConfigKey returns the ProviderConfigKey field value
func (o *ConnectionMetadataPatchRequest) GetProviderConfigKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderConfigKey
}

// GetProviderConfigKeyOk returns a tuple with the ProviderConfigKey field value
// and a boolean to check if the value has been set.
func (o *ConnectionMetadataPatchRequest) GetProviderConfigKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderConfigKey, true
}

// SetProviderConfigKey sets field value
func (o *ConnectionMetadataPatchRequest) SetProviderConfigKey(v string) {
	o.ProviderConfigKey = v
}

// GetMetadata returns the Metadata field value
func (o *ConnectionMetadataPatchRequest) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ConnectionMetadataPatchRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ConnectionMetadataPatchRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o ConnectionMetadataPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionMetadataPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connection_id"] = o.ConnectionId
	toSerialize["provider_config_key"] = o.ProviderConfigKey
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *ConnectionMetadataPatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connection_id",
		"provider_config_key",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionMetadataPatchRequest := _ConnectionMetadataPatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionMetadataPatchRequest)

	if err != nil {
		return err
	}

	*o = ConnectionMetadataPatchRequest(varConnectionMetadataPatchRequest)

	return err
}

type NullableConnectionMetadataPatchRequest struct {
	value *ConnectionMetadataPatchRequest
	isSet bool
}

func (v NullableConnectionMetadataPatchRequest) Get() *ConnectionMetadataPatchRequest {
	return v.value
}

func (v *NullableConnectionMetadataPatchRequest) Set(val *ConnectionMetadataPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionMetadataPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionMetadataPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionMetadataPatchRequest(val *ConnectionMetadataPatchRequest) *NullableConnectionMetadataPatchRequest {
	return &NullableConnectionMetadataPatchRequest{value: val, isSet: true}
}

func (v NullableConnectionMetadataPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionMetadataPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


