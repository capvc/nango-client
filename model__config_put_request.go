/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPutRequest{}

// ConfigPutRequest struct for ConfigPutRequest
type ConfigPutRequest struct {
	// The integration ID that you created on Nango.
	ProviderConfigKey string `json:"provider_config_key"`
	// The Nango API Configuration.
	Provider string `json:"provider"`
	// The ID of your OAuth app (registed with the external API).
	OauthClientId string `json:"oauth_client_id"`
	// The secret of your OAuth app (registed with the external API).
	OauthClientSecret string `json:"oauth_client_secret"`
	// Comma separated list of scopes.
	OauthScopes *string `json:"oauth_scopes,omitempty"`
}

type _ConfigPutRequest ConfigPutRequest

// NewConfigPutRequest instantiates a new ConfigPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPutRequest(providerConfigKey string, provider string, oauthClientId string, oauthClientSecret string) *ConfigPutRequest {
	this := ConfigPutRequest{}
	this.ProviderConfigKey = providerConfigKey
	this.Provider = provider
	this.OauthClientId = oauthClientId
	this.OauthClientSecret = oauthClientSecret
	return &this
}

// NewConfigPutRequestWithDefaults instantiates a new ConfigPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPutRequestWithDefaults() *ConfigPutRequest {
	this := ConfigPutRequest{}
	return &this
}

// GetProviderConfigKey returns the ProviderConfigKey field value
func (o *ConfigPutRequest) GetProviderConfigKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderConfigKey
}

// GetProviderConfigKeyOk returns a tuple with the ProviderConfigKey field value
// and a boolean to check if the value has been set.
func (o *ConfigPutRequest) GetProviderConfigKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderConfigKey, true
}

// SetProviderConfigKey sets field value
func (o *ConfigPutRequest) SetProviderConfigKey(v string) {
	o.ProviderConfigKey = v
}

// GetProvider returns the Provider field value
func (o *ConfigPutRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ConfigPutRequest) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ConfigPutRequest) SetProvider(v string) {
	o.Provider = v
}

// GetOauthClientId returns the OauthClientId field value
func (o *ConfigPutRequest) GetOauthClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OauthClientId
}

// GetOauthClientIdOk returns a tuple with the OauthClientId field value
// and a boolean to check if the value has been set.
func (o *ConfigPutRequest) GetOauthClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OauthClientId, true
}

// SetOauthClientId sets field value
func (o *ConfigPutRequest) SetOauthClientId(v string) {
	o.OauthClientId = v
}

// GetOauthClientSecret returns the OauthClientSecret field value
func (o *ConfigPutRequest) GetOauthClientSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OauthClientSecret
}

// GetOauthClientSecretOk returns a tuple with the OauthClientSecret field value
// and a boolean to check if the value has been set.
func (o *ConfigPutRequest) GetOauthClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OauthClientSecret, true
}

// SetOauthClientSecret sets field value
func (o *ConfigPutRequest) SetOauthClientSecret(v string) {
	o.OauthClientSecret = v
}

// GetOauthScopes returns the OauthScopes field value if set, zero value otherwise.
func (o *ConfigPutRequest) GetOauthScopes() string {
	if o == nil || IsNil(o.OauthScopes) {
		var ret string
		return ret
	}
	return *o.OauthScopes
}

// GetOauthScopesOk returns a tuple with the OauthScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPutRequest) GetOauthScopesOk() (*string, bool) {
	if o == nil || IsNil(o.OauthScopes) {
		return nil, false
	}
	return o.OauthScopes, true
}

// HasOauthScopes returns a boolean if a field has been set.
func (o *ConfigPutRequest) HasOauthScopes() bool {
	if o != nil && !IsNil(o.OauthScopes) {
		return true
	}

	return false
}

// SetOauthScopes gets a reference to the given string and assigns it to the OauthScopes field.
func (o *ConfigPutRequest) SetOauthScopes(v string) {
	o.OauthScopes = &v
}

func (o ConfigPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider_config_key"] = o.ProviderConfigKey
	toSerialize["provider"] = o.Provider
	toSerialize["oauth_client_id"] = o.OauthClientId
	toSerialize["oauth_client_secret"] = o.OauthClientSecret
	if !IsNil(o.OauthScopes) {
		toSerialize["oauth_scopes"] = o.OauthScopes
	}
	return toSerialize, nil
}

func (o *ConfigPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider_config_key",
		"provider",
		"oauth_client_id",
		"oauth_client_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigPutRequest := _ConfigPutRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigPutRequest)

	if err != nil {
		return err
	}

	*o = ConfigPutRequest(varConfigPutRequest)

	return err
}

type NullableConfigPutRequest struct {
	value *ConfigPutRequest
	isSet bool
}

func (v NullableConfigPutRequest) Get() *ConfigPutRequest {
	return v.value
}

func (v *NullableConfigPutRequest) Set(val *ConfigPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPutRequest(val *ConfigPutRequest) *NullableConfigPutRequest {
	return &NullableConfigPutRequest{value: val, isSet: true}
}

func (v NullableConfigPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


