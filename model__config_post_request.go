/*
Nango API

Nango API specs used to authorize & sync data with external APIs.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nango

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigPostRequest{}

// ConfigPostRequest struct for ConfigPostRequest
type ConfigPostRequest struct {
	// A unique integration ID, which you will use in the other API calls to reference this integration.
	ProviderConfigKey string `json:"provider_config_key"`
	// The Nango API Configuration.
	Provider string `json:"provider"`
	// The ID of your OAuth app (registed with the external API). Required for OAuth APIs.
	OauthClientId *string `json:"oauth_client_id,omitempty"`
	// The secret of your OAuth app (registed with the external API). Required for OAuth APIs.
	OauthClientSecret *string `json:"oauth_client_secret,omitempty"`
	// Comma separated list of scopes.
	OauthScopes *string `json:"oauth_scopes,omitempty"`
}

type _ConfigPostRequest ConfigPostRequest

// NewConfigPostRequest instantiates a new ConfigPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigPostRequest(providerConfigKey string, provider string) *ConfigPostRequest {
	this := ConfigPostRequest{}
	this.ProviderConfigKey = providerConfigKey
	this.Provider = provider
	return &this
}

// NewConfigPostRequestWithDefaults instantiates a new ConfigPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigPostRequestWithDefaults() *ConfigPostRequest {
	this := ConfigPostRequest{}
	return &this
}

// GetProviderConfigKey returns the ProviderConfigKey field value
func (o *ConfigPostRequest) GetProviderConfigKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderConfigKey
}

// GetProviderConfigKeyOk returns a tuple with the ProviderConfigKey field value
// and a boolean to check if the value has been set.
func (o *ConfigPostRequest) GetProviderConfigKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderConfigKey, true
}

// SetProviderConfigKey sets field value
func (o *ConfigPostRequest) SetProviderConfigKey(v string) {
	o.ProviderConfigKey = v
}

// GetProvider returns the Provider field value
func (o *ConfigPostRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ConfigPostRequest) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ConfigPostRequest) SetProvider(v string) {
	o.Provider = v
}

// GetOauthClientId returns the OauthClientId field value if set, zero value otherwise.
func (o *ConfigPostRequest) GetOauthClientId() string {
	if o == nil || IsNil(o.OauthClientId) {
		var ret string
		return ret
	}
	return *o.OauthClientId
}

// GetOauthClientIdOk returns a tuple with the OauthClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPostRequest) GetOauthClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.OauthClientId) {
		return nil, false
	}
	return o.OauthClientId, true
}

// HasOauthClientId returns a boolean if a field has been set.
func (o *ConfigPostRequest) HasOauthClientId() bool {
	if o != nil && !IsNil(o.OauthClientId) {
		return true
	}

	return false
}

// SetOauthClientId gets a reference to the given string and assigns it to the OauthClientId field.
func (o *ConfigPostRequest) SetOauthClientId(v string) {
	o.OauthClientId = &v
}

// GetOauthClientSecret returns the OauthClientSecret field value if set, zero value otherwise.
func (o *ConfigPostRequest) GetOauthClientSecret() string {
	if o == nil || IsNil(o.OauthClientSecret) {
		var ret string
		return ret
	}
	return *o.OauthClientSecret
}

// GetOauthClientSecretOk returns a tuple with the OauthClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPostRequest) GetOauthClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.OauthClientSecret) {
		return nil, false
	}
	return o.OauthClientSecret, true
}

// HasOauthClientSecret returns a boolean if a field has been set.
func (o *ConfigPostRequest) HasOauthClientSecret() bool {
	if o != nil && !IsNil(o.OauthClientSecret) {
		return true
	}

	return false
}

// SetOauthClientSecret gets a reference to the given string and assigns it to the OauthClientSecret field.
func (o *ConfigPostRequest) SetOauthClientSecret(v string) {
	o.OauthClientSecret = &v
}

// GetOauthScopes returns the OauthScopes field value if set, zero value otherwise.
func (o *ConfigPostRequest) GetOauthScopes() string {
	if o == nil || IsNil(o.OauthScopes) {
		var ret string
		return ret
	}
	return *o.OauthScopes
}

// GetOauthScopesOk returns a tuple with the OauthScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigPostRequest) GetOauthScopesOk() (*string, bool) {
	if o == nil || IsNil(o.OauthScopes) {
		return nil, false
	}
	return o.OauthScopes, true
}

// HasOauthScopes returns a boolean if a field has been set.
func (o *ConfigPostRequest) HasOauthScopes() bool {
	if o != nil && !IsNil(o.OauthScopes) {
		return true
	}

	return false
}

// SetOauthScopes gets a reference to the given string and assigns it to the OauthScopes field.
func (o *ConfigPostRequest) SetOauthScopes(v string) {
	o.OauthScopes = &v
}

func (o ConfigPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider_config_key"] = o.ProviderConfigKey
	toSerialize["provider"] = o.Provider
	if !IsNil(o.OauthClientId) {
		toSerialize["oauth_client_id"] = o.OauthClientId
	}
	if !IsNil(o.OauthClientSecret) {
		toSerialize["oauth_client_secret"] = o.OauthClientSecret
	}
	if !IsNil(o.OauthScopes) {
		toSerialize["oauth_scopes"] = o.OauthScopes
	}
	return toSerialize, nil
}

func (o *ConfigPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider_config_key",
		"provider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigPostRequest := _ConfigPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigPostRequest)

	if err != nil {
		return err
	}

	*o = ConfigPostRequest(varConfigPostRequest)

	return err
}

type NullableConfigPostRequest struct {
	value *ConfigPostRequest
	isSet bool
}

func (v NullableConfigPostRequest) Get() *ConfigPostRequest {
	return v.value
}

func (v *NullableConfigPostRequest) Set(val *ConfigPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigPostRequest(val *ConfigPostRequest) *NullableConfigPostRequest {
	return &NullableConfigPostRequest{value: val, isSet: true}
}

func (v NullableConfigPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


